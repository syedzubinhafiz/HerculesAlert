// src/screens/AlertDetailsScreen.js
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  SafeAreaView,
  Linking,
  Share,
  Alert,
  ScrollView
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';

const AlertDetailsScreen = ({ route, navigation }) => {
  const { alertId } = route.params || { alertId: 'none' };
  const [alert, setAlert] = useState(null);
  
  // In a real app, you'd fetch this from your database
  useEffect(() => {
    // Simulate a database lookup
    const sampleAlerts = {
      '1': {
        id: '1',
        title: 'AMBER ALERT',
        childName: 'Sarah Johnson',
        location: 'Central Park, New York',
        description: '8-year-old female, blonde hair, blue eyes, last seen wearing a pink jacket and jeans. Last seen with her mother at the Central Park playground around 3:30 PM. May be in the company of an adult male, approximately 40 years old, wearing a black coat.',
        vehicleInfo: 'Possibly in a blue Honda Civic with NY plates ABC-1234.',
        timestamp: new Date(Date.now() - 1000 * 60 * 30), // 30 minutes ago
      },
      '2': {
        id: '2',
        title: 'MISSING CHILD',
        childName: 'Michael Chen',
        location: 'Mission District, San Francisco',
        description: '5-year-old male, black hair, brown eyes, last seen in red t-shirt and shorts. Last seen outside Valencia Street Elementary School. Child does not speak English well.',
        vehicleInfo: 'Unknown',
        timestamp: new Date(Date.now() - 1000 * 60 * 120), // 2 hours ago
      },
    };
    
    // For demo mode alerts created dynamically
    if (!sampleAlerts[alertId]) {
      // Create a placeholder for dynamically generated alerts
      setAlert({
        id: alertId,
        title: 'AMBER ALERT',
        childName: 'Demo Alert',
        location: 'Generated Location',
        description: 'This is a demo alert generated by the application. In a real scenario, this would contain detailed information about the missing child.',
        vehicleInfo: 'Demo Vehicle Information',
        timestamp: new Date(),
      });
    } else {
      setAlert(sampleAlerts[alertId]);
    }
  }, [alertId]);
  
  // Format the date nicely
  const formatDate = (date) => {
    if (!date) return '';
    
    return date.toLocaleString('en-US', {
      weekday: 'long',
      month: 'long',
      day: 'numeric',
      year: 'numeric',
      hour: 'numeric',
      minute: '2-digit',
      hour12: true
    });
  };
  
  // Open map with the location
  const openMap = () => {
    if (alert && alert.location) {
      const mapUrl = `https://maps.google.com/?q=${encodeURIComponent(alert.location)}`;
      Linking.openURL(mapUrl).catch(err => {
        console.error('Error opening map:', err);
        Alert.alert('Error', 'Could not open map application');
      });
    }
  };
  
  // Share the alert with others
  const shareAlert = async () => {
    if (!alert) return;
    
    try {
      await Share.share({
        message: 
          `AMBER ALERT: ${alert.childName} missing from ${alert.location}.\n\n` +
          `Description: ${alert.description}\n\n` +
          `Vehicle: ${alert.vehicleInfo || 'Unknown'}\n\n` +
          `If seen, call emergency services immediately.`,
        title: alert.title,
      });
    } catch (error) {
      console.error('Error sharing:', error);
    }
  };
  
  // Call emergency services
  const callEmergency = () => {
    Alert.alert(
      'Call Emergency Services',
      'Are you sure you want to call emergency services? This is a demo app.',
      [
        {
          text: 'Cancel',
          style: 'cancel',
        },
        {
          text: 'Call',
          onPress: () => {
            Alert.alert(
              'Demo App',
              'In a real app, this would dial emergency services.',
              [{ text: 'OK' }]
            );
          },
        },
      ],
      { cancelable: true }
    );
  };
  
  if (!alert) {
    return (
      <View style={styles.loadingContainer}>
        <Text style={styles.loadingText}>Loading alert details...</Text>
      </View>
    );
  }
  
  return (
    <SafeAreaView style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollContent}>
        <View style={styles.alertHeader}>
          <Text style={styles.alertTitle}>{alert.title}</Text>
          <Text style={styles.alertTime}>
            {formatDate(alert.timestamp)}
          </Text>
        </View>
        
        <View style={styles.placeholderImage}>
          <Ionicons name="person" size={60} color="#FF634780" />
          <Text style={styles.placeholderText}>No image available</Text>
        </View>
        
        <View style={styles.detailsContainer}>
          <View style={styles.detailRow}>
            <Ionicons name="person" size={22} color="#FF6347" style={styles.detailIcon} />
            <Text style={styles.detailLabel}>Missing Child:</Text>
            <Text style={styles.detailText}>{alert.childName}</Text>
          </View>
          
          <TouchableOpacity style={styles.detailRow} onPress={openMap}>
            <Ionicons name="location" size={22} color="#FF6347" style={styles.detailIcon} />
            <Text style={styles.detailLabel}>Location:</Text>
            <Text style={styles.detailText}>{alert.location}</Text>
            <Ionicons name="open-outline" size={16} color="#999" style={styles.linkIcon} />
          </TouchableOpacity>
          
          {alert.vehicleInfo ? (
            <View style={styles.detailRow}>
              <Ionicons name="car" size={22} color="#FF6347" style={styles.detailIcon} />
              <Text style={styles.detailLabel}>Vehicle:</Text>
              <Text style={styles.detailText}>{alert.vehicleInfo}</Text>
            </View>
          ) : null}
          
          <View style={styles.descriptionContainer}>
            <Text style={styles.descriptionLabel}>Description:</Text>
            <Text style={styles.descriptionText}>{alert.description}</Text>
          </View>
          
          <View style={styles.actionButtonsContainer}>
            <TouchableOpacity style={styles.actionButton} onPress={shareAlert}>
              <Ionicons name="share-social" size={22} color="#FFF" />
              <Text style={styles.actionButtonText}>Share</Text>
            </TouchableOpacity>
            
            <TouchableOpacity style={[styles.actionButton, styles.emergencyButton]} onPress={callEmergency}>
              <Ionicons name="call" size={22} color="#FFF" />
              <Text style={styles.actionButtonText}>Emergency</Text>
            </TouchableOpacity>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  scrollContent: {
    paddingBottom: 32,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 24,
  },
  loadingText: {
    fontSize: 16,
    color: '#666',
  },
  alertHeader: {
    padding: 16,
    backgroundColor: '#FF634710',
  },
  alertTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FF6347',
    marginBottom: 8,
  },
  alertTime: {
    fontSize: 14,
    color: '#999',
  },
  placeholderImage: {
    width: '100%',
    height: 200,
    backgroundColor: '#F0F0F0',
    justifyContent: 'center',
    alignItems: 'center',
  },
  placeholderText: {
    marginTop: 12,
    fontSize: 16,
    color: '#999',
  },
  detailsContainer: {
    margin: 16,
    backgroundColor: '#FFF',
    borderRadius: 12,
    padding: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  detailRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
    flexWrap: 'wrap',
  },
  detailIcon: {
    marginRight: 8,
  },
  detailLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginRight: 8,
    width: 120,
  },
  detailText: {
    fontSize: 16,
    color: '#666',
    flex: 1,
  },
  linkIcon: {
    marginLeft: 4,
  },
  descriptionContainer: {
    marginTop: 8,
    borderTopWidth: 1,
    borderTopColor: '#EFEFEF',
    paddingTop: 16,
  },
  descriptionLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
  },
  descriptionText: {
    fontSize: 16,
    color: '#666',
    lineHeight: 24,
  },
  actionButtonsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 24,
  },
  actionButton: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#3498db',
    borderRadius: 8,
    paddingVertical: 12,
    paddingHorizontal: 16,
    flex: 1,
    marginHorizontal: 4,
  },
  emergencyButton: {
    backgroundColor: '#FF0000',
  },
  actionButtonText: {
    color: '#FFF',
    fontWeight: 'bold',
    fontSize: 14,
    marginLeft: 8,
  },
});

export default AlertDetailsScreen;